lines(xy, col="red")
fix(getParentSets)
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore)
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/feature_probabilities.R')
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
fix(getEdgeProbabilities)
fix(getEdgeProbability)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/sources"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
mExactEdgeProb <- computeExactEdgeProbabilities(numNodes, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, maxParents, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
library("gtools")
library("hash")
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, maxParents, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 300)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, maxParents, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 300)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(mEdgeProb)
View(mEdgeProb)
View(samples)
View(samples)
View(sampleLogScores)
View(sampleLogScores)
View(mAdj)
View(mAdj)
View(mEdgeProb)
View(mEdgeProb)
View(roc)
View(roc)
View(mObs)
View(mEdgeProb)
View(mEdgeProb)
View(mAdj)
View(mAdj)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, maxParents, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
numNodes <- 10
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 10
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
mOrders <- matrix(c(1, 2, 3
2, 1, 3
3, 2, 1
1, 3, 2
2, 3, 1
3, 1, 2),
nrow=6, byrows=T)
mOrders <- matrix(c(1, 2, 3,
2, 1, 3,
3, 2, 1,
1, 3, 2,
2, 3, 1,
3, 1, 2),
nrow=6, byrows=T)
mOrders <- matrix(c(1, 2, 3,
2, 1, 3,
3, 2, 1,
1, 3, 2,
2, 3, 1,
3, 1, 2),
nrow=6, byrow=T)
mOrders

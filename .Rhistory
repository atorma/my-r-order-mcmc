library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, dirichletWeightParam=1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 700)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
h <- hash()
h[["aargh"]]
is.null(h[["aargh"]]))
is.null(h[["aargh"]])
paste("Score for node", 1, "parents", c(1,2,34), collapse=' ')
paste("Score for node", 1, "parents", c(1,2,34))
paste("Score for node", node, "parents", paste(parents, collapse=' '), collapse=' ')
paste("Score for node", node, "parents", paste(parents, collapse=' '), collapse=' ')
paste("Score for node", node, "parents", paste(parents, collapse=' '), collapse=' ')
paste("Score for node", 1, "parents", paste(2:5, collapse=' '), collapse=' ')
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, dirichletWeightParam=1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, dirichletWeightParam=1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, dirichletWeightParam=1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, 1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, 1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
fix(arrThetas)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, 1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
stuff <- rdirichlet(100, c(1, 5))
stuff
plot(stuff)
hist(stuff, plot=T)
stuff <- rdirichlet(100, c(5, 5))
hist(stuff, plot=T)
stuff <- rdirichlet(100, c(1/5, 5))
stuff <- rdirichlet(100, c(1/5, 5))
hist(stuff, plot=T)
stuff <- rdirichlet(100, c(1/5, 5))
stuff <- rdirichlet(100, c(1/5, 5))
stuff <- rdirichlet(100, c(2, 5))
stuff <- rdirichlet(100, c(2, 5))
1
stuff <- rdirichlet(100, c(1, 1))
hist(stuff, plot=T)
stuff <- rdirichlet(1000, c(1, 1))
hist(stuff, plot=T)
stuff <- rdirichlet(1000, c(0.5, 0.5))
hist(stuff, plot=T)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities, 1)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
allOrders <- permutations(numNodes, numNodes, 1:numNodes)
mExactEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(allOrders)) {
mExactEdgeProb <- mExactEdgeProb + getEdgeProbabilities(allOrders[s,], maxParents, functLogLocalStructureScore)
}
mExactEdgeProb <- mExactEdgeProb/nrow(allOrders)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
fix(arrThetas)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 4000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=50)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
wd <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R"
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/R/sources"
setwd(wd)
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 1000)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 8000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
allOrders <- permutations(numNodes, numNodes, 1:numNodes)
mExactEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(allOrders)) {
mExactEdgeProb <- mExactEdgeProb + getEdgeProbabilities(allOrders[s,], maxParents, functLogLocalStructureScore)
}
mExactEdgeProb <- mExactEdgeProb/nrow(allOrders)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")

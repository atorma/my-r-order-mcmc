library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(mEdgeProb)
View(mEdgeProb)
View(samples)
View(samples)
View(sampleLogScores)
View(sampleLogScores)
View(mAdj)
View(mAdj)
View(mEdgeProb)
View(mEdgeProb)
View(roc)
View(roc)
View(mObs)
View(mEdgeProb)
View(mEdgeProb)
View(mAdj)
View(mAdj)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 8
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 6
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 50)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
# Exact edge probabilities. BE CAREFUL!
mExactEdgeProb <- getExactEdgeProbabilities(numNodes, maxParents, functLogLocalStructureScore)
exactVersusMcmc <- matrix(NA, nrow=length(mEdgeProb), ncol=2)
exactVersusMcmc[,1] <- mExactEdgeProb
exactVersusMcmc[,2] <- mEdgeProb
plot(exactVersusMcmc)
lines(xy, col="red")
numNodes <- 10
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
numNodes <- 10
cardinalities <- rep(3, numNodes)
maxParents <- 3
mAdj <- generateRandomDag(numNodes, maxParents)
arrThetas <- generateMultinomialParams(mAdj, cardinalities)
mObs <- generateSamplesFromModel(mAdj, arrThetas, 100)
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 5000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
# Plot ROC curve
roc <- getRocCurve(mEdgeProb, mAdj)
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("testthat")
codePath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
testPath <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/tests"
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
auto_test(code_path=codePath, test_path=testPath)
library("gtools")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
mOrders <- matrix(c(1, 2, 3
2, 1, 3
3, 2, 1
1, 3, 2
2, 3, 1
3, 1, 2),
nrow=6, byrows=T)
mOrders <- matrix(c(1, 2, 3,
2, 1, 3,
3, 2, 1,
1, 3, 2,
2, 3, 1,
3, 1, 2),
nrow=6, byrows=T)
mOrders <- matrix(c(1, 2, 3,
2, 1, 3,
3, 2, 1,
1, 3, 2,
2, 3, 1,
3, 1, 2),
nrow=6, byrow=T)
mOrders
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_artificial_model_run_1.RData")
result1 <- result
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_artificial_model_run_2.RData")
result2 <- result
result1$samples[50,]
result2$samples[50,]
result2$samples[2500,]
result1$samples[2500,]
result1$samples[2501,]
result2$samples[2501,]
sampleIdx <- seq(from=5000, to=numSamples, by=200)
samples1 <- result1$samples[sampleIdx,]
samples2 <- result2$samples[sampleIdx,]
sampleLogScores1 <- result1$logScores[sampleIdx,]
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_run_1.RData")
mEdgeProb1 <- mEdgeProb
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
samples1 <- read.table(file="samples1.txt", header=TRUE, fileEncoding="UTF-8")
View(samples1)
View(samples1)
logLocalOrderScores1 <- read.table(file="logLocalOrderScores1.txt", header=TRUE, fileEncoding="UTF-8")
logLocalOrderScores2 <- read.table(file="logLocalOrderScores1.txt", header=TRUE, fileEncoding="UTF-8")
logLocalOrderScores2 <- read.table(file="logLocalOrderScores2.txt", header=TRUE, fileEncoding="UTF-8")
samples2 <- read.table(file="samples2.txt", header=TRUE, fileEncoding="UTF-8")
logOrderScores1 <- rowSums(logLocalOrderScores1)
logOrderScores2 <- rowSums(logLocalOrderScores2)
plot(logOrderScores1, type="l", col="red")
plot(logOrderScores2, type="l", col="blue")
lines(logOrderScores2, type="l", col="blue")
plot(logOrderScores1[1:5000], type="l", col="red")
lines(logOrderScores2[1:5000], type="l", col="blue")
plot(logOrderScores1[1:2000], type="l", col="red")
lines(logOrderScores2[1:2000], type="l", col="blue")
title(xlab="order sample index", ylab="logarithmic score of order")
axis(side=1, labels=F)
axis(side=1, labels=F)
plot(logOrderScores1, type="l", col="red", xlab="order sample index", ylab="order score (ln)")
plot(logOrderScores1[1:2000], type="l", col="red", xlab="order sample index", ylab="order score (ln)")
lines(logOrderScores2[1:2000], type="l", col="blue")
library("coda")
test <- mcmc(logOrderScores1)
autocorr(test)
test <- mcmc(logOrderScores1, lags=c(0, 5, 10, 50, 100, 200, 400))
autocorr(test, lags=c(0, 5, 10, 50, 100, 200, 400))
mcmc1 <- mcmc(logOrderScores1)
mcmc2 <- mcmc(logOrderScores2)
mcmc.runs <- mcmc.list(mcmc1, mcmc2)
gelman.diag(mcmc.runs)
mcmc1 <- mcmc(logOrderScores1[5000:])
mcmc1 <- mcmc(logOrderScores1[5000:25000])
mcmc2 <- mcmc(logOrderScores2[5000:25000])
mcmc.runs <- mcmc.list(mcmc1, mcmc2)
gelman.diag(mcmc.runs)
allLogLocalOrderScores1 <- logLocalOrderScores1
allLogLocalOrderScores2 <- logLocalOrderScores2
allOrderSamples1 <- samples1
allOrderSamples2 <- samples2
rm(logLocalOrderScores1)
rm(logLocalOrderScores2)
rm(samples2)
rm(samples1)
allLogOrderScores1 <- logOrderScores1
allLogOrderScores2 <- logOrderScores2
rm(logOrderScores2)
rm(logOrderScores1)
rm(test)
sampleIdx <- seq(from=5000, to=numSamples, by=200)
numSamples <- 25000
sampleIdx <- seq(from=5000, to=numSamples, by=200)
samples <- allOrderSamples1[sampleIdx,]
samples <- rbind(samples, allOrderSamples2[sampleIdx,])
logLocalOrderScores <- allLogLocalOrderScores1[sampleIdx, ]
logLocalOrderScores <- rbind(logLocalOrderScores, allLogLocalOrderScores2[sampleIdx, ])
samples[c(101,202),]
rownames(samples) <- NULL
samples
samples[c(101,202),]
allOrderSamples1[1:5,]
allOrderSamples2[1:5,]
samples.logLocalOrderScores <- logLocalOrderScores
rm(logLocalOrderScores)
combinedSamples <- samples
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_run_1.RData")
samples <- combinedSamples
mEdgeProb1 <- mEdgeProb
rm(sampleLogScores)
functLogLocalOrderScore(1:25)
getLocalOrderScores(1:25, functLogLocalOrderScore)
getLogLocalOrderScores(1:25, functLogLocalOrderScore)
getLogLocalOrderScores(samples[1,], functLogLocalOrderScore)
samples[1,]
samples <- as.matrix(samples)
samples.logLocalOrderScores <- as.matrix(samples.logLocalOrderScores)
getLogLocalOrderScores(samples[1,], functLogLocalOrderScore)
samples.logLocalOrderScores[1,]
samples.logLocalOrderScores[200,]
getLogLocalOrderScores(samples[200,], functLogLocalOrderScore)
View(samples)
View(samples)
View(samples.logLocalOrderScores)
View(samples.logLocalOrderScores)
View(samples)
View(samples)
rownames(samples.logLocalOrderScores) <- NULL
View(samples.logLocalOrderScores)
View(samples.logLocalOrderScores)
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, samples.logLocalOrderScores)
system.time(mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, samples.logLocalOrderScores))
View(mEdgeProb)
View(mEdgeProb)
View(mEdgeProb1)
View(mEdgeProb1)
(mEdgeProb > 0.5)*1
(mEdgeProb > 0.5)*1 - (mEdgeProb1 > 0.1)*1
(mEdgeProb > 0.5)*1 - (mEdgeProb1 > 0.5)*1
((mEdgeProb > 0.5)*1 - (mEdgeProb1 > 0.5)*1) > 0)
(mEdgeProb > 0.1)*1 - (mEdgeProb1 > 0.1)*1
predicted <- (mEdgeProb > 0.1)*1 - (mEdgeProb1 > 0.1)*1
which(predicted != 0)
which(predicted != 0, arr.ind=T)
predicted <- (mEdgeProb > 0.1)*1
which(predicted != 0)
which(predicted != 0, arr.ind=T)
save.image("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_combined_runs.RData")
View(mEdgeProb)
View(mEdgeProb)
rownames(mEdgeProb) <- varNames
colnames(mEdgeProb) <- varNames
mEdgeProb
as.vector(mEdgeProb)
matrix(mEdgeProb, ncol=3)
# List of edge probabilities
edgeProbs <- matrix(NA, nrow=numNodes^2, ncol=3)
colnames(edgeProbs) <- c("source", "target", "P")
row <- 1
for (i in 1:numNodes) {
for (j in 1:numNodes) {
edgeProbs[row, 1] <- nodeNames[i]
edgeProbs[row, 2] <- nodeNames[j]
edgeProbs[row, 3] <- mEdgeProb[i,j]
}
}
# List of edge probabilities
edgeProbs <- matrix(NA, nrow=numNodes^2, ncol=3)
colnames(edgeProbs) <- c("source", "target", "P")
row <- 1
for (i in 1:numNodes) {
for (j in 1:numNodes) {
edgeProbs[row, 1] <- varNames[i]
edgeProbs[row, 2] <- varNames[j]
edgeProbs[row, 3] <- mEdgeProb[i,j]
}
}
edgeProbs
edgeProbs <- matrix(NA, nrow=numNodes^2, ncol=3)
colnames(edgeProbs) <- c("source", "target", "P")
row <- 1
for (i in 1:numNodes) {
for (j in 1:numNodes) {
edgeProbs[row, 1] <- varNames[i]
edgeProbs[row, 2] <- varNames[j]
edgeProbs[row, 3] <- mEdgeProb[i,j]
row <- row+1
}
}
edgeProbs
rm(edgeProbs)
characer(0)
char(0)
string(0)
character(0)
sourceNames <- character(numNodes^2)
targetNames <- character(numNodes^2)
edgeProbs <- numeric(numNodes^2)
row <- 1
for (i in 1:numNodes) {
for (j in 1:numNodes) {
sourceNames[row] <- varNames[i]
targetNames[row] <- varNames[j]
edgeProbs[row] <- mEdgeProb[i,j]
row <- row+1
}
}
edgeRanking <- data.frame(source=sourceNames, target=targetNames, probability=edgeProbs)
edgeRanking
sourceNames <- character(numNodes^2 - numNodes)
targetNames <- character(numNodes^2 - numNodes)
edgeProbs <- numeric(numNodes^2 - numNodes)
row <- 1
for (i in 1:numNodes) {
for (j in 1:numNodes) {
if (i != j) {
sourceNames[row] <- varNames[i]
targetNames[row] <- varNames[j]
edgeProbs[row] <- mEdgeProb[i,j]
row <- row+1
}
}
}
edgeRanking <- data.frame(source=sourceNames, target=targetNames, probability=edgeProbs)
edgeRanking
order(edgeProbs, sourceNames, targetNames)
edgeRanking[order(edgeProbs, sourceNames, targetNames, decreasing=TRUE), ]
order(edgeProbs, sourceNames, targetNames, decreasing=TRUE)
order(edgeProbs, decreasing=TRUE)
edgeProbs[1:20]
edgeProbs[c(223, 37)]
edgeRanking <- data.frame(source=sourceNames, target=targetNames, probability=edgeProbs)
edgeRanking <- edgeRanking[order(edgeProbs, sourceNames, targetNames, decreasing=TRUE), ]
View(edgeRanking)
View(edgeRanking)
row.names(edgeRanking) <- NULL
View(edgeRanking)
View(edgeRanking)
View(mEdgeProb)
View(mEdgeProb)
write.table(edgeRanking[,c("source,", "target")], file="TörmäAnssi_1_arcs.txt", quote=FALSE, row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
edgeRanking[["source"]]
fix(varNames)
write.table(edgeRanking[[c("source,", "target")]], file="TörmäAnssi_1_arcs.txt", quote=FALSE, row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
edgeRanking[[c("source")]]
edgeRanking[[c("source", "target")]]
save.image("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_combined_runs.RData")
edgeRanking[,1:2]
write.table(edgeRanking[,1:2], file="TörmäAnssi_1_arcs.txt", quote=FALSE, row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
write.table(edgeRanking, file="edge_probabilities.txt", quote=FALSE, fileEncoding="UTF-8")
training_data[5,]
mObs[5,]
max(training_data)
table(mObs)
table(mObs[,1], mObs[,2])
table(mObs[,1], mObs[,2], mObs[,3])
table(mObs[,1], mObs[,2], mObs[,3], mObs[,4])
table(mObs[,1])
table(mObs[,1], mObs[,2])

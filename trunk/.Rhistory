load("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model.RData")
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/testing.RData")
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/order_mcmc.R')
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/scoring_functions.R')
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 10
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 10
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
logScores <- result$logScores
View(logScores)
View(logScores)
logScores <- result$logScores
samples <- resutl$samples
samples <- result$samples
View(samples)
View(samples)
View(mAdj)
View(mAdj)
colSums(mAdj)
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/order_mcmc.R')
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 22000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.02)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb > thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model_2.RData")
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb > thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
View(mEdgeProb)
View(mEdgeProb)
View(mAdj)
View(mAdj)
max(mEdgeProb)
medgeProb[mEdgeProb > 0.5]
mEdgeProb[mEdgeProb > 0.5]
help(which)
mEdgeProb[which(mEdgeProb > 0.5, arr.int=T)]
mEdgeProb[which(mEdgeProb > 0.5, arr.ind=T)]
mEdgeProb > 0.9
predicted <- mEdgeProb > 0.9
View(predicted)
View(predicted)
fix(thresholds)
8!
fact(8)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
fix(sampleIdx)
fix(thresholds)
sampleIdx <- seq(from=5000, to=numSamples, by=300)
fix(sampleIdx)
sampleIdx <- seq(from=5000, to=numSamples, by=300)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model_2.RData")
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_combined_runs.RData")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
# compute the predicted test vector probabilities using the high-scoring order
samples.logOrderScores <- rowSums(samples.logLocalOrderScores)
orderRanking <- order(samples.logOrderScores, decreasing=TRUE)
bestOrder <- samples[orderRanking[1], ]
bestOrderLogLocalOrderScores <- samples.logLocalOrderScores[orderRanking[1],]
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mTestObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:nrow(mTestObs)) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores)
}
})
fix(bestOrder)
fix(bestOrderLogLocalOrderScores)
# compute the predicted test vector probabilities using the high-scoring order
samples.logOrderScores <- rowSums(samples.logLocalOrderScores)
orderRanking <- order(samples.logOrderScores, decreasing=TRUE)
bestOrder <- samples[orderRanking[1], ]
bestOrderLogLocalOrderScores <- samples.logLocalOrderScores[orderRanking[1],]
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mTestObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:nrow(mTestObs)) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores)
}
})
# compute the predicted test vector probabilities using all the samples
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:nrow(mTestObs)) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
}
})
# compute the predicted test vector probabilities using the high-scoring order
samples.logOrderScores <- rowSums(samples.logLocalOrderScores)
orderRanking <- order(samples.logOrderScores, decreasing=TRUE)
bestOrder <- samples[orderRanking[1], ]
bestOrderLogLocalOrderScores <- samples.logLocalOrderScores[orderRanking[1],]
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:nrow(mTestObs)) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores)
}
})
# compute the predicted test vector probabilities using the high-scoring order
samples.logOrderScores <- rowSums(samples.logLocalOrderScores)
orderRanking <- order(samples.logOrderScores, decreasing=TRUE)
bestOrder <- samples[orderRanking[1], ]
bestOrderLogLocalOrderScores <- samples.logLocalOrderScores[orderRanking[1],]
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:nrow(mTestObs)) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores)
}
})
# normalize vEstTestObsProbs
vEstTestObsProbsNorm <- vEstTestObsProbs/sum(vEstTestObsProbs)
save.image("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/vector_probabilities_using_highest_scoring_sample.RData")
write.table(vEstTestObsProbsNorm, "TörmäAnssi_1_probs.txt", quote=FALSE, row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
setwd("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc")
setwd("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc")
write.table(vEstTestObsProbsNorm, "TörmäAnssi_1_probs.txt", quote=FALSE, row.names=FALSE, col.names=FALSE, fileEncoding="UTF-8")
sum(vEstTestObsProbsNorm)
getStateVectorProbability(mTestObs[600,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores)
syste.time(getStateVectorProbability(mTestObs[600,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
system.time(getStateVectorProbability(mTestObs[600,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
system.time(getStateVectorProbability(mTestObs[1,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
fix(getStateVectorProbability)
system.time(getStateVectorProbability(mTestObs[1,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
fix(getStateVectorProbability)
system.time(getStateVectorProbability(mTestObs[1,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
fix(getStateVectorProbability)
system.time(getStateVectorProbability(mTestObs[1,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
fix(getStateVectorProbability)
system.time(getStateVectorProbability(mTestObs[1,], bestOrder, maxParents, functNodeStateProb, functLogLocalStructureScore, bestOrderLogLocalOrderScores))
log(functStateProbability(15, 1, c(3,5,8), c(3,3,3))
)
log(functNodeStateProb(15, 1, c(3,5,8), c(3,3,3))
)
functNodeStateProb(15, 1, c(3,5,8), c(3,3,3))
system.time( functNodeStateProb(15, 1, c(3,5,8), c(3,3,3)) )
system.time( functNodeStateProb(15, 1, c(3,5,8), c(3,3,3)) )
system.time( functNodeStateProb(20, 2, c(18,9,12), c(1,2,3)) )
fix(getStateVectorProbability)
getParentSets(20, bestOrder, 0:maxParents)
library("coda")
autocorr.diag(mcmc.runs)
autocorr.diag(mcmc.runs, lags=c(5, 10, 50, 100, 200, 300, 400))
autocorr.diag(mcmc1, lags=c(5, 10, 50, 100, 200, 300, 400))
autocorr.diag(mcmc, lags=c(5, 10, 50, 100, 200, 300, 400))
autocorr.diag(mcmc.runs, lags=c(5, 10, 50, 100, 200, 300, 400))
gelman.diag(mcmc.runs, lags=c(5, 10, 50, 100, 200, 300, 400))
gelman.diag(mcmc.runs)
mcmc1.thinned <- rowSums(allLogLocalOrderScores1[sampleIdx,])
mcmc2.thinned <- rowSums(allLogLocalOrderScores2[sampleIdx,])
mcmc.runs.thinned <- mcmc.list(mcmc1.thinned, mcmc2.thinned)
mcmc1.thinned <- mcm(rowSums(allLogLocalOrderScores1[sampleIdx,]))
mcmc1.thinned <- mcmc(rowSums(allLogLocalOrderScores1[sampleIdx,]))
mcmc2.thinned <- mcmc(rowSums(allLogLocalOrderScores2[sampleIdx,]))
mcmc.runs.thinned <- mcmc.list(mcmc1.thinned, mcmc2.thinned)
gelman.diag(mcmc.runs.thinned)
autocorr.diag(mcmc.runs.thinned)
plot(rowSums(allLogLocalOrderScores1))
plot(rowSums(allLogLocalOrderScores1[5000,]), type="l", color="red")
plot(rowSums(allLogLocalOrderScores1[5000,]), type="l", col="red")
plot(rowSums(allLogLocalOrderScores1[5000,]), type="l", c="red")
plot(rowSums(allLogLocalOrderScores1[5000,]), type="l")
plot(rowSums(allLogLocalOrderScores1[5000:25000,]), type="l", col="red")
lines(rowSums(allLogLocalOrderScores2[5000:25000,]), type="l", col="blue")
plot(mcmc.runs)
32000/(60*60)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:1) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
}
})
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:1) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
}
})
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
fix(getParentSets)
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:1) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
}
})
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- numeric(nrow(mTestObs))
for (o in 1:1) {
vEstTestObsProbs[o] <- getStateVectorProbability(mTestObs[o,], samples[1,], maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores[1,])
}
})
getThetas <- createStateProbabilityMatrixFunction(cardinalities, mObs)
getThetas(26, 1:26)
getThetas(26, c(9,4,6))
replicates(getThetas(26, c(9,4,6)))
benchmark(getThetas(26, c(9,4,6)))
choose(1:5,0:4)
sum(choose(25,0:4))
sum(choose(25,0:3))
getLogLocalStructurePrior(1, integer(0), 1:26)
getLogLocalStructurePrior(2, 1, 1:26)
getLogLocalStructurePrior(2, integer(0), 1:26)
getLogLocalStructurePrior(3, 1, 1:26)
2626*1500*200
2626*1500*200/100*1.29
2626*1500*200/100*1.29/3600
benchmark(getThetas(26, c(9,4)))
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
getThetas <- createStateProbabilityMatrixFunction(cardinalities, mObs)
fix(createStateProbabilityMatrixFunction)
fix(createSufficientStatsHelper)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
getThetas <- createStateProbabilityMatrixFunction(cardinalities, mObs)
benchmark(getThetas(26, c(9,4,6)))
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
getThetas <- createStateProbabilityMatrixFunction(cardinalities, mObs)
benchmark(getThetas(26, c(9,4,6)))
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
getThetas <- createStateProbabilityMatrixFunction(cardinalities, mObs)
benchmark(getThetas(26, c(9,4,6)))
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({)
vEstTestObsProbs <- getStateVectorProbability(mTestObs[1,], samples[1,], maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores[1,])
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- getStateVectorProbability(mTestObs[1,], samples[1,], maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores[1,])
})
unique.data.frame(samples)
165*200*1500/3600
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- getStateVectorProbability(mTestObs[1,], samples[1,], maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores[1,])
})
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- getStateVectorProbability(mTestObs, samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
})
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- getStateVectorProbability(mTestObs, samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
})
vEstTestObsProbs
vEstTestObsProbsNorm[1]
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
functNodeStateProb <- createStateProbabilityFunction(cardinalities, mObs)
system.time({
vEstTestObsProbs <- getStateVectorProbability(mTestObs, samples, maxParents, functNodeStateProb, functLogLocalStructureScore, samples.logLocalOrderScores)
})
5611.7/277
5611.7/279
1500*200*20/3600
1500*202*20/3600
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
getSuffStatsOld <- createSufficientStatsHelperOld(cardinalities, mObs)
benchmark(getSuffStatsOld(6, c(2,1,4)))
getSuffStats <- createSufficientStatsHelper(cardinalities, mObs)
benchmark(getSuffStats(6, c(2,1,4)))
combinations(5, 3, c(4, 2, 3, 1, 5))
source('~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions/node_state_probabilities.R')
choose(1, 0)

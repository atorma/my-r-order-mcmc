load("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model.RData")
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/testing.RData")
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/order_mcmc.R')
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/scoring_functions.R')
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 10
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 10
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
logScores <- result$logScores
View(logScores)
View(logScores)
logScores <- result$logScores
samples <- resutl$samples
samples <- result$samples
View(samples)
View(samples)
View(mAdj)
View(mAdj)
colSums(mAdj)
source('~/Dropbox/Project in Probabilistic Models (582637)/R/sources/order_mcmc.R')
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
# Score of best order
logScoreBestOrder <- sum(getLogLocalOrderScores(1:numNodes, functLogLocalOrderScore))
# order-MCMC
numSamples <- 22000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=1000, to=numSamples, by=100)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.02)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb > thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model_2.RData")
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb > thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
View(mEdgeProb)
View(mEdgeProb)
View(mAdj)
View(mAdj)
max(mEdgeProb)
medgeProb[mEdgeProb > 0.5]
mEdgeProb[mEdgeProb > 0.5]
help(which)
mEdgeProb[which(mEdgeProb > 0.5, arr.int=T)]
mEdgeProb[which(mEdgeProb > 0.5, arr.ind=T)]
mEdgeProb > 0.9
predicted <- mEdgeProb > 0.9
View(predicted)
View(predicted)
fix(thresholds)
8!
fact(8)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
View(roc)
View(roc)
fix(sampleIdx)
fix(thresholds)
sampleIdx <- seq(from=5000, to=numSamples, by=300)
fix(sampleIdx)
sampleIdx <- seq(from=5000, to=numSamples, by=300)
samples <- result$samples[sampleIdx,]
mEdgeProb <- matrix(0, numNodes, numNodes)
for (s in 1:nrow(samples)) {
mEdgeProb <- mEdgeProb + getEdgeProbabilities(samples[s,], maxParents, functLogLocalStructureScore)
}
mEdgeProb <- mEdgeProb/nrow(samples)
# Compute ROC curve
thresholds <- seq(from=0, to=1, by=0.001)
roc <- matrix(NA, length(thresholds), 2)
for (i in 1:length(thresholds)) {
predicted <- mEdgeProb >= thresholds[i]
TP <- sum(predicted*mAdj)
FP <- sum(predicted*!mAdj)
P <- sum(mAdj)
N <- sum(!mAdj)
roc[i,1] <- FP/N
roc[i,2] <- TP/P
}
xy <- matrix(c(0,1,0,1), 2, 2)
plot(roc, type="l", xlim=c(0,1), ylim=c(0,1), col="blue")
lines(xy, col="red")
save.image("~/Dropbox/Project in Probabilistic Models (582637)/R/artificial_26_node_model_2.RData")
load("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_run_1.RData")
setwd("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc")
save.image("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_run_2.RData")
# Data and parameters for MCMC
mObs <- as.matrix(training_data)
varNames <- names(training_data)
numNodes <- length(varNames)
cardinalities <- rep(3, numNodes)
maxParents <- 3
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# order-MCMC
numSamples <- 25000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=5000, to=numSamples, by=200)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
library("gtools")
library("hash")
library("R.utils")
library("rbenchmark")
library("testthat")
sourceDir <- "~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/functions"
sourceDirectory(sourceDir)
# Data and parameters for MCMC
mObs <- as.matrix(training_data)
varNames <- names(training_data)
numNodes <- length(varNames)
cardinalities <- rep(3, numNodes)
maxParents <- 3
# Function for log(score(Xi, Pa(Xi) | D, <))
functLogLocalStructureScore <- createCachedLogLocalStructureScoringFunction(cardinalities, mObs, maxParents)
functLogLocalOrderScore <- createCustomLogLocalOrderScoringFunction(maxParents, functLogLocalStructureScore)
# order-MCMC
numSamples <- 25000
system.time(result <- runOrderMCMC(numNodes, maxParents, functLogLocalStructureScore, numSamples))
plot(rowSums(result$logScores), type="l")
# Compute edge probabilities
sampleIdx <- seq(from=5000, to=numSamples, by=200)
samples <- result$samples[sampleIdx,]
sampleLogScores <- result$logScores[sampleIdx,]
mEdgeProb <- getEdgeProbabilities(samples, maxParents, functLogLocalStructureScore, sampleLogScores)
save.image("~/Hommia/Santsaus/Project in Probabilistic Models (582637)/my-r-order-mcmc/order_mcmc_training_data_run_2.RData")
mean(rowSums(sampleLogScores))
samples[50,]
plot(rowSums(result$logScores[300:25000,]), type="l")
plot(rowSums(result$logScores[400:25000,]), type="l")
plot(rowSums(result$logScores[350:25000,]), type="l")
plot(rowSums(result$logScores[400:25000,]), type="l")
.Random.seed
allSamples <- result$samples
colnames(allSamples) <- varNames
write.table(x=allSamples, file="samples2.txt", row.names=FALSE, quote=FALSE, fileEncoding="UTF-8")
allLogLocalOrderScores <- result$logScores
colnames(allLogLocalOrderScores) <- varNames
write.table(x=allLogLocalOrderScores, file="logLocalOrderScores2.txt", row.names=FALSE, quote=FALSE, fileEncoding="UTF-8")
